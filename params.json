{"name":"Worxforus library","tagline":"Android networking and database library, which includes multiple retries for HTML access and serializes database access to prevent crashes.  ","body":"WorxForUs_Library\r\n=================\r\nThis library is used by WorxForUs and can be found in products associated with the Android app for checkliststogo.com & cxworx.com.\r\n\r\n<h2>\r\nWorxForUs Android Framework (Database and Network helper tools)</h2>\r\n<br />\r\nThis article is an introductory guide to the Android helper library by WorxForUs.&nbsp; The Android SDK has a lot of built in functionality, but there are certain things that it does not take care of for you.&nbsp; The API guides only get you so far.&nbsp; This framework is an attempt to pick up where the Android Samples leave off and address some of the trickier issues.&nbsp; Hopefully you will find features in this library to help your code become more robust.<br />\r\n<br />\r\nMajor Features of the WorxForUs Android Library:<br />\r\n<ul>\r\n<li><a href=\"http://right-handed-monkey.blogspot.com/2014/03/android-database-example-and-tutorial.html\" target=\"_blank\">Database management (How To)</a></li>\r\n<ul>\r\n<li>Serialized access framework for writing thread safe (multi-threaded) applications</li>\r\n<li>Allows upgrade on a per table level instead of per database</li>\r\n<li>Supports methods to keep track of data synchronization to a remote server</li>\r\n</ul>\r\n<li><a href=\"http://right-handed-monkey.blogspot.com/2014/04/android-networking-example-and-tutorial.html\" target=\"_blank\">Network Tools (How To)</a></li>\r\n<ul>\r\n<li>Allows easy detection and handling of network errors</li>\r\n<li>Built in support for cookies</li>\r\n<li>Allows easy use of network retry mode (ie. will attempt 5 times before returning an error)</li>\r\n<li>Deals with authenticated and non-authenticated network requests </li>\r\n</ul>\r\n<li><a href=\"http://right-handed-monkey.blogspot.com/2014/04/obscured-shared-preferences-for-android.html\">Obscuring Shared Preferences Data (How To)</a> - com.worxforus.ObscuredSharedPreferences</li>\r\n<ul>\r\n<li>Shared data is normally stored in plaintext.&nbsp; This tool easily encrypts your SharedPreferences data.</li>\r\n</ul>\r\n<li>Object Pools - com.worxforus.Pool&nbsp;</li>\r\n<ul>\r\n<li>Put objects into a pool to keep memory usage low and minimize object creation</li>\r\n</ul>\r\n</ul>\r\n<h4>\r\n&nbsp;</h4>\r\n<h4>\r\nInstallation </h4>\r\nThere are two ways to use the library.<br />\r\n1. Clone the source code at the github <a href=\"https://github.com/RightHandedMonkey/WorxForUs_Library\">WorxForUs Library</a> and import into your IDE.&nbsp; Link the WorxForUs Library project to your project.<br />\r\n2. Download the <a href=\"https://github.com/RightHandedMonkey/WorxForUs_Library/blob/master/bin/worxforuslibrary.jar\">jar file </a>from github and include in your project/lib files.<br />\r\n<br />\r\nIf you are using the Network Tools, you may want to get the latest Apache HttpClient package from their download page <a href=\"http://hc.apache.org/downloads.cgi\">here</a>.&nbsp; You will want the httpcore-4.x.x.jar, httpclient-4.x.x.jar, httpclient-cache-4.x.x.jar, and httpmime-4.x.x.jar.&nbsp; Import these into your referenced jar library.&nbsp; The latest binary release as of this writing is the <a href=\"http://psg.mtu.edu/pub/apache//httpcomponents/httpclient/binary/httpcomponents-client-4.3.3-bin.zip\">4.3.3 package</a>.<br />\r\n<br />\r\n<h4>\r\nWhy was this Framework created?&nbsp;</h4>\r\n<h4>\r\n</h4>\r\nAside from the typical utilities one generally collects or creates when writing software for a long time, I had a few specific needs for robust database access and network handling.<br />\r\n<br />\r\n<h4>\r\n<a href=\"http://right-handed-monkey.blogspot.com/2014/03/android-database-example-and-tutorial.html\" target=\"_blank\">Database Management</a></h4>\r\nA typical example of using a SQLite database in Android shows that you extend the SQLiteOpenHelper.&nbsp; This is good, but what if you have several tables each with their own version?&nbsp; Also, the sample projects show doing a dbHelper.getWritableDatabase(), but do not say anything about how to handle multiple threads contending for the same resource.&nbsp; This may work fine on single core CPU devices, but suddenly your app may crash on a multi-Core Nexus 7 because your database access is not serialized. This package use a Singleton to provide access to the SQLite database and Semaphores to provide the locking which by default serializes the database access and prevents many common database exceptions from occurring.<br />\r\n<br />\r\n<h4>\r\nNetwork Tools</h4>\r\nI needed to handle cookies and detect when network connections were failing and identify what type of failure occurred.&nbsp; Was the problem a server failure or a bad connection on the user device?&nbsp; In a mobile network errors are the norm and it is important to handle them correctly.&nbsp; I also wanted a way to easily retry a connection several times until it was successful.&nbsp; This package is based on the Apache HttpClient because it easily supported the things I needed such as cookies and error detection.&nbsp; Future versions are planned to use the Velocity framework. <br />\r\n<br />\r\n<br />\r\n<span style=\"font-size: x-small;\">*Additional Source of code, including but not limited to:</span><br />\r\n<span style=\"font-size: x-small;\">The Android Open Source Project - for the Base64Support code.</span><br />\r\n<span style=\"font-size: x-small;\">Obscuring Shared Preferences - much of the code for this came from help by emmby at <a href=\"http://stackoverflow.com/questions/785973/what-is-the-most-appropriate-way-to-store-user-settings-in-android-application/6393502#6393502\">http://stackoverflow.com/questions/785973/what-is-the-most-appropriate-way-to-store-user-settings-in-android-application/6393502#6393502</a><br />&nbsp;</span>","google":"UA-51495566-1","note":"Don't delete this file! It's used internally to help with page regeneration."}